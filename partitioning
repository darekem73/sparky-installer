#!/bin/bash

#choose the drive to partition

CHOICE_FILE=/tmp/choice.$$

TESTEFI0=`lsmod | grep efi`
if [ -d /sys/firmware/efi/efivars ] || [ "$TESTEFI0" != "" ]; then
        TESTEFI="EFI detected"
else
        TESTEFI=""
fi

drive_to_part() {
	DRIVES=`lsblk -l -p | grep 'disk' | awk '{print $1}'`
	partdrivemenu=""
	for i in $DRIVES; do
		partdrive="$i"
		partdrivesize=`lsblk -o NAME,SIZE,TYPE -l -p -b | grep -m 1 "$i" | awk '{print $2}'`
		partdrivemenu="$partdrivemenu $partdrive $partdrivesize"
	done
	
	dialog --title "Tytul" --menu "Select drive to partition" 40 72 12 Exit "Wyjscie" $partdrivemenu 2>$CHOICE_FILE
	
	if [ "$?" = "0" ]; then
		PARTDRIVE=`cat $CHOICE_FILE`
		PARTDRIVESIZE=`lsblk -o NAME,SIZE,TYPE -l -p -b | grep -m 1 "$PARTDRIVE" | awk '{print $2}'`
	else
		PARTDRIVE="Exit"
	fi
	
	rm $CHOICE_FILE
}

drive_to_part

if [ "$PARTDRIVE" = "Exit" ]; then
	exit 1
fi

echo $PARTDRIVE $PARTDRIVESIZE

#automatic partitioning

#schemas
# efi
#	+efi (/dev/sda1) (300MiB)
# !efi = mbr (dos)
#	(o) lvm
#		+boot (/dev/sda2) (500MiB)
#		pvcreate (/dev/sda3)
#		vgcreate sparky-vg
#	(o) / (/dev/sda3) or (lvcreate -L -n root sparky-vg) (30% free, min 5G, max 30G)
#	+swap (/dev/sda4) or (lvcreate -L -n swap sparky-vg) (1024MiB)
#	(o) separate /home (/dev/sda5) or (lvcreate -L +100%FREE -n home)

calc_root_size() {
	target_size=$1
	status=0
	ROOT_PART_SIZE=$(awk -v K=1024 -v disksize=$target_size 'BEGIN { M=K^2; G=K^3; size=0; if (disksize > 5*G) { size = int(disksize/3/G)*G; if (size > 30*G) size=30*G}; print size }')
	if [ $ROOT_PART_SIZE -eq 0 ]; then
		status=1
	fi

	return $status
}

partschemamenu="1 AIO 2 /home 3 LVM_AIO 4 LVM_/home"
dialog --title "Tytul" --menu "Select partitioning schema" 40 72 12 Manual "Manual partitioning" $partschemamenu 2>$CHOICE_FILE
if [ "$?" = "0" ]; then
	PARTSCHEMA=`cat $CHOICE_FILE`
else
	PARTSCHEMA="Exit"
fi
	
if [ "$PARTSCHEMA" == "Exit" ]; then
	exit 1
fi

if [ "$PARTSCHEMA" == "Manual" ]; then
	#manual partitioning
	#$PARTITIONPROG $PARTDRIVE
	#select_mount_points
else
	K=1024
	(( M=$K*$K ))
	(( G=$K*$K*$K ))
	if [ "$TESTEFI" != "" ]; then
		(( EFIPARTSIZE=500*M ))
		(( PARTDRIVESIZE=$PARTDRIVESIZE-$EFIPARTSIZE ))
	fi
	case $PARTSCHEMA in
		"1") #aio
			LVM=0
			(( SWAPPARTSIZE=1*G ))
			(( PARTDRIVESIZE=$PARTDRIVESIZE-$SWAPPARTSIZE ))
			ROOT_PART_SIZE=$PARTDRIVESIZE
			if [ "$TESTEFI" != "" ]; then
				PARTS_TO_CREATE="1,1,$EFIPARTSIZE|2,20,$ROOT_PART_SIZE|3,19, "
				PARTS_TO_MOUNT="$PARTDRIVE""1,/boot/efi,vfat|$PARTDRIVE""2,/,ext4|$PARTDRIVE""3,swap,swap"
			else
				PARTS_TO_CREATE="1,20,$ROOT_PART_SIZE|2,19, "
				PARTS_TO_MOUNT="$PARTDRIVE""1,/,ext4|$PARTDRIVE""2,swap,swap"
				#part1 bootable
			fi
			;;
		"2") #separate home
			LVM=0
			(( SWAPPARTSIZE=1*G ))
			(( PARTDRIVESIZE=$PARTDRIVESIZE-$SWAPPARTSIZE ))
			calc_root_size $PARTDRIVESIZE
			if [ $ROOT_PART_SIZE -eq 0 ]; then
				exit 1
			fi
			(( PARTDRIVESIZE=$PARTDRIVESIZE-$ROOT_PART_SIZE ))
			if [ "$TESTEFI" != "" ]; then
				PARTS_TO_CREATE="1,1,$EFIPARTSIZE|2,20,$ROOT_PART_SIZE|3,19,$SWAPPARTSIZE|4,20, "
				PARTS_TO_MOUNT="$PARTDRIVE""1,/boot/efi,vfat|$PARTDRIVE""2,/,ext4|$PARTDRIVE""3,swap,swap|$PARTDRIVE""4,/home,ext4"
			else
				PARTS_TO_CREATE="1,20,$ROOT_PART_SIZE|2,19,$SWAPPARTSIZE|3,20, "
				PARTS_TO_MOUNT="$PARTDRIVE""1,/,ext4|$PARTDRIVE""2,swap,swap|$PARTDRIVE""3,/home,ext4"
				#part1 bootable
			fi
			;;
		"3") #lvm aio
		"4") #lvm separate home
			LVM=1
			(( BOOTPARTSIZE=500*M ))
			(( PARTDRIVESIZE=$PARTDRIVESIZE-$BOOTPARTSIZE ))
			if [ "$TESTEFI" != "" ]; then
				PARTS_TO_CREATE="1,1,$EFIPARTSIZE|2,20,$BOOTPARTSIZE|3,20, "
				PARTS_TO_MOUNT="$PARTDRIVE""1,/boot/efi,vfat|$PARTDRIVE""2,/boot,ext4"
				LVM_PART_DRIVE="$PARTDRIVE""3"
			else
				PARTS_TO_CREATE="1,20,$BOOTPARTSIZE|2,20, "
				PARTS_TO_MOUNT="$PARTDRIVE""1,/boot,ext4"
				LVM_PART_DRIVE="$PARTDRIVE""2"
				#part1 bootable
			fi
			;;
	esac

	#create partitions $PARTS_TO_CREATE
	echo $PARTS_TO_CREATE
	if [ "$TESTEFI" != "" ]; then
		echo "g" > $CHOICE_FILE
	else
		echo "o" > $CHOICE_FILE
	fi
	NF=$(echo $PARTS_TO_CREATE | awk -F"|" '{print NF}')
	for i in `seq $NF`; do
		CMD=$(echo $PARTS_TO_MOUNT | cut -d "|" -f $i)
		PART=$(echo $CMD | cut -d, -f1)
		TYPE=$(echo $CMD | cut -d, -f2)
		SIZE=$(echo $CMD | cut -d, -f3)
		echo "n" >> $CHOICE_FILE
		if [ "$TESTEFI" == "" ]; then
			echo "p" > $CHOICE_FILE
		fi
		echo $PART >> $CHOICE_FILE
		echo "" >> $CHOICE_FILE
		if [ "$SIZE" =="" ]; then
			echo "" >> $CHOICE_FILE
		else
			echo "+$SIZE" >> $CHOICE_FILE
		fi
		echo "t" >> $CHOICE_FILE
		echo $PART >> $CHOICE_FILE
		echo $TYPE >> $CHOICE_FILE
	done
	if [ "$TESTEFI" == "" ]; then
		echo "a" >> $CHOICE_FILE
		echo "1" >> $CHOICE_FILE
	fi
	echo "w" >> $CHOICE_FILE
	
	#cat $CHOICE_FILE | fdisk $PARTDRIVE
	cat $CHOICE_FILE
	rm $CHOICE_FILE

	if [ $LVM -eq 1 ]; then
		#create vg
		pvcreate $LVM_PART_DRIVE
		VG_NAME="vgsparky" #dont use "-" in the name
		vgcreate $VG_NAME $LVM_PART_DRIVE 
		VGSIZE=$(vgs -o vg_size --units b $VG_NAME | sed 1D | awk '{ print substr($1,1,length($1)-1) }')
		#create lvs
		(( SWAPSIZE=1*G ))
		(( VGSIZE==$VGSIZE-$SWAPSIZE ))
		case $PARTSCHEMA in
			"3") #lvm aio
				LVS_TO_CREATE="swap,1G,swap,swap|root,,/,ext4"
				;;
			"4") #lvm separate home
				calc_root_size $VGSIZE
				(( ROOT_PART_SIZE=$ROOT_PART_SIZE/G ))
				LVS_TO_CREATE="swap,1G,swap,swap|root,$ROOT_PART_SIZE""G,/,ext4|home,,/home,ext4"
				;;
		esac
		NF=$(echo $PARTS_TO_CREATE | awk -F"|" '{print NF}')
		for i in `seq $NF`; do
			CMD=$(echo $PARTS_TO_MOUNT | cut -d "|" -f $i)
			PART=$(echo $CMD | cut -d, -f1)
			SIZE=$(echo $CMD | cut -d, -f2)
			MOUNTPOINT=$(echo $CMD | cut -d, -f3)
			FSTYPE=$(echo $CMD | cut -d, -f4)
			if [ "$SIZE" != "" ]; then
				lvcreate -l $SIZE -n $PART $VG_NAME
			else
				lvcreate -L +100%FREE -n $PART $VG_NAME
			fi
			PART_TO_MOUNT=$(lsblk -l -p -b | egrep "$VG_NAME.*$PART" | awk '{print $1}')
			
			PARTS_TO_MOUNT="$PARTS_TO_MOUNT|$PART_TO_MOUNT,$MOUNTPOINT,$FSTYPE"
		done
	fi
fi

#mount_selected_partitions_and_create_filesystems $PARTS_TO_MOUNT

exit 0


exit 0
if [[ "$1" == "dos" ]]; then
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << FDISK_CMDS  | sudo fdisk $PARTDRIVE
o      # create new DOS partition
n      # add new partition
p
1      # partition number
       # default - first sector 
+512MiB # partition size
n
p      # add new partition
2      # partition number
       # default - first sector 
+1GiB # partition size
n
p      # add new partition
3      # partition number
       # default - first sector 
       # default - last sector 
t      # change partition type
1      # partition number
83      # Linux filesystem
t      # change partition type
2      # partition number
82     # Linux filesystem
t      # change partition type
3      # partition number
83     # Linux filesystem
a      # activate
1      # partition number
w      # write partition table and exit
FDISK_CMDS

elif [[ "$1" == "gpt" ]]; then

sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << FDISK_CMDS  | sudo fdisk /dev/sda
g      # create new GPT partition
n      # add new partition
1      # partition number
       # default - first sector 
+512MiB # partition size
n      # add new partition
2      # partition number
       # default - first sector 
+1GiB # partition size
n      # add new partition
3      # partition number
       # default - first sector 
       # default - last sector 
t      # change partition type
1      # partition number
1      # Linux filesystem
t      # change partition type
2      # partition number
19     # Linux filesystem
t      # change partition type
3      # partition number
20     # Linux filesystem
w      # write partition table and exit
FDISK_CMDS

fi
